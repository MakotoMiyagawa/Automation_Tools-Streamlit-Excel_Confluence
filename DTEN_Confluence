import streamlit as st
import requests
from requests.auth import HTTPBasicAuth
import xml.etree.ElementTree as ET

# Confluenceの設定
CONFLUENCE_URL = "https://.atlassian.net/wiki/rest/api"
CONFLUENCE_USERNAME = "@gmail.com"
CONFLUENCE_API_TOKEN = ""
PAGE_ID = "12345"  # 更新したいページのID

# Streamlitでの入力
st.title("Confluence Table Updater")

# 上の表（1番目）の入力フィールド(未更新のためコードなし)

# 中央(2番目)の表の入力フィールド
st.subheader("EVM情報")
pv_value_middle = st.text_input("PV")
ev_value_middle = st.text_input("EV")
ac_value_middle = st.text_input("AC")

# 下の表（3番目）の入力フィールド
st.subheader("遅延アクティビティ")
pv_value_bottom = st.text_input("遅延アクティビティID")

if st.button("Update Confluence"):
    if any([pv_value_middle, ev_value_middle, ac_value_middle, pv_value_bottom]):
        # Confluenceページの現状の内容を取得
        response = requests.get(
            f"{CONFLUENCE_URL}/content/{PAGE_ID}?expand=body.storage,version",
            auth=HTTPBasicAuth(CONFLUENCE_USERNAME, CONFLUENCE_API_TOKEN)
        )

        if response.status_code == 200:
            page_data = response.json()
            version_number = page_data["version"]["number"] + 1
            current_content = page_data["body"]["storage"]["value"]

            # XMLとしてパースする際に名前空間を無視するための対策
            def remove_namespace(xml_string):
                return xml_string.replace('ac:', '')

            # すべてのコンテンツを単一のルート要素で包む
            wrapped_content = f"<root>{remove_namespace(current_content)}</root>"
            root = ET.fromstring(wrapped_content)

            # すべての表を取得
            tables = root.findall(".//table")

            # 上の表（最初の表）に新しい値を挿入（未更新のためコード削除済み）

            # 中央の表（2番目の表）に新しい値を挿入
            if len(tables) >= 2:
                middle_table = tables[1]
                try:
                    if pv_value_middle:
                        row = middle_table.findall(".//tr")[1]  # 2行目 (index 1)
                        cell = row.findall(".//td")[1]  # 2列目 (index 1)
                        cell.text = pv_value_middle

                    if ev_value_middle:
                        row = middle_table.findall(".//tr")[2]  # 3行目 (index 2)
                        cell = row.findall(".//td")[1]  # 2列目 (index 1)
                        cell.text = ev_value_middle

                    if ac_value_middle:
                        row = middle_table.findall(".//tr")[3]  # 4行目 (index 3)
                        cell = row.findall(".//td")[1]  # 2列目 (index 1)
                        cell.text = ac_value_middle
                except IndexError:
                    st.error("Specified row or column number is out of range in the middle table.")

            # 下の表（3番目の表）に新しい値を挿入
            if len(tables) >= 3:
                bottom_table = tables[2]
                try:
                    if pv_value_bottom:
                        row = bottom_table.findall(".//tr")[1]  # 2行目 (index 1)
                        cell = row.findall(".//td")[0]  # 1列目 (index 1)
                        cell.text = pv_value_bottom

                except IndexError:
                    st.error("Specified row or column number is out of range in the bottom table.")

            # 更新されたXMLを再度Storage Formatとして変換
            updated_content = ET.tostring(root, encoding='unicode', method='xml')

            # 不要なラッパー要素（<root>）を削除
            updated_content = updated_content.replace('<root>', '').replace('</root>', '')

            # Confluenceページを更新
            update_data = {
                "version": {"number": version_number},
                "title": page_data["title"],
                "type": "page",
                "body": {
                    "storage": {
                        "value": updated_content,
                        "representation": "storage"
                    }
                }
            }

            update_response = requests.put(
                f"{CONFLUENCE_URL}/content/{PAGE_ID}",
                json=update_data,
                auth=HTTPBasicAuth(CONFLUENCE_USERNAME, CONFLUENCE_API_TOKEN)
            )

            if update_response.status_code == 200:
                st.success("Confluence page updated successfully!")
            else:
                st.error(f"Failed to update Confluence page: {update_response.status_code}")
        else:
            st.error(f"Failed to retrieve Confluence page: {response.status_code}")
    else:
        st.warning("At least one value must be provided!")
